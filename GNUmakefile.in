# @configure_input@

SHELL := @_BASH@
VPATH := @srcdir@

ifndef PKG_TARG
target :=
else
target := $(PKG_TARG)-
endif

srcdir := @srcdir@
top_builddir := @top_builddir@
flex := @FLEX@
libtool := @LIBTOOL@
cxx := @CXX@
objcxx := @OBJCXX@
cflags := @CPPFLAGS@ @CXXFLAGS@ -DYYDEBUG=1
ldflags := @LDFLAGS@
library := @LIBS@ @LTLIBAPR@ @LTLIBICONV@
time := $(shell which @TIME@)

INSTALL := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
INSTALL_DATA := @INSTALL_DATA@

PACKAGE_TARNAME := @PACKAGE_TARNAME@
prefix := @prefix@
exec_prefix := @exec_prefix@
bindir := @bindir@
sbindir := @sbindir@
libexecdir := @libexecdir@
datarootdir := @datarootdir@
datadir := @datadir@
sysconfdir := @sysconfdir@
sharedstatedir := @sharedstatedir@
localstatedir := @localstatedir@
includedir := @includedir@
oldincludedir := @oldincludedir@
docdir := @docdir@
infodir := @infodir@
htmldir := @htmldir@
dvidir := @dvidir@
pdfdir := @pdfdir@
psdir := @psdir@
libdir := @libdir@
localedir := @localedir@
mandir := @mandir@

paths := $(foreach path,$(paths),$(wildcard $(path)))
cflags += $(foreach path,$(paths),-I$(path) -L$(path))

svn := $(shell svnversion $(srcdir))

all:
all := cycript

dpkg_architecture := $(shell which dpkg-architecture 2>/dev/null)
ifneq ($(dpkg_architecture),)
arch := $(shell $(dpkg_architecture) -qDEB_HOST_ARCH 2>/dev/null)
endif

header := Cycript.tab.hh Parser.hpp Pooling.hpp cycript.hpp Internal.hpp Error.hpp String.hpp Exception.hpp Standard.hpp

code := 
code += Replace.lo Output.lo
code += Cycript.tab.lo lex.cy.lo
code += Network.lo Parser.lo
code += JavaScriptCore.lo Library.lo

inject := 

filters := #E4X
ldid := true
entitle := $(ldid)
lib := lib
dll := so
depends :=

restart ?= $(MAKE)
uname_s ?= $(shell uname -s)
uname_p ?= $(shell uname -p)

-include $(uname_s).mk
-include $(uname_s)-$(uname_p).mk

ifdef CY_EXECUTE
ifeq ($(filter ObjectiveC,$(filters)),)
ifneq ($(shell which gnustep-config 2>/dev/null),)
include GNUstep.mk
endif
endif
endif

cflags += -Wall -Werror -Wno-parentheses #-Wno-unused
cflags += -fno-common
ifneq ($(srcdir),.)
cflags += -I.
endif
cflags += -I$(srcdir) -I$(srcdir)/include

all += $(lib)cycript.la

filters += $(shell bison <(echo '%code{}%%_:') -o/dev/null 2>/dev/null && echo Bison24 || echo Bison23)

ifdef arch
deb := $(shell grep ^Package: $(srcdir)/control.in | cut -d ' ' -f 2-)_$(shell grep ^Version: $(srcdir)/control.in | cut -d ' ' -f 2 | sed -e 's/\#/$(svn)/')_$(arch).deb

all:

extra::

ifeq ($(depends)$(dll),dylib)
control.tmp: control.in cycript $(lib)cycript.dylib
	sed -e 's/&/'"$$(dpkg-query -S $$(otool -lah cycript *.dylib | grep dylib | grep -v ':$$' | sed -e 's/^ *name //;s/ (offset [0-9]*)$$//' | sort -u) 2>/dev/null | sed -e 's/:.*//; /^cycript$$/ d; s/$$/,/' | sort -u | tr '\n' ' ')"'/;s/, $$//;s/#/$(svn)/;s/%/$(arch)/' $< >$@
else
ifeq ($(depends)$(dll),so)
control.tmp: control.in cycript $(lib)cycript.so
	sed -e 's/&/'"$$(dpkg-query -S $$(ldd cycript $(lib)cycript.so | sed -e '/:$$/ d; s/^[ \t]*\([^ ]* => \)\?\([^ ]*\) .*/\2/' | sort -u) 2>/dev/null | sed -e 's/:.*//; /^cycript$$/ d; s/$$/,/' | sort -u | tr '\n' ' ')"'/;s/, $$//;s/#/$(svn)/;s/%/$(arch)/' $< >$@
else
control.tmp: control.in
	sed -e 's/&/$(foreach depend,$(depends),$(depend),)/;s/,$$//;s/#/$(svn)/;s/%/$(arch)/' $< >$@
endif
endif

control: control.tmp
	[[ -e control ]] && diff control control.tmp &>/dev/null || cp -pRf control.tmp control

$(deb): $(all) control
	rm -rf package
	mkdir -p package/DEBIAN
	cp -pR control package/DEBIAN
	mkdir -p package/usr/{bin,lib,sbin}
	$(restart) extra
	cp -pR $(lib)cycript.$(dll) package/usr/lib
	cp -pR cycript package/usr/bin
	#cp -pR cyrver package/usr/sbin
	dpkg-deb -b package $(deb)
endif

all: $(all)

clean::
	rm -rf *.lo *.o .libs $(lib)cycript.$(dll) $(lib)cycript.la $(all) Struct.hpp lex.cy.c Cycript.tab.cc Cycript.tab.hh location.hh position.hh stack.hh cyrver Cycript.yy Cycript.l control Bridge.hpp Cycript.output

distclean: clean
	rm -f GNUmakefile config.log config.status libtool

%.yy: %.yy.in
	$(srcdir)/Filter.sh <$< >$@ $(filters)

%.l: %.l.in
	$(srcdir)/Filter.sh <$< >$@ $(filters)

Cycript.tab.cc Cycript.tab.hh location.hh position.hh: Cycript.yy
	bison -v --report=state $<

lex.cy.c: Cycript.l
	$(flex) -t $< | sed -e 's/int yyl;/yy_size_t yyl;/;s/int yyleng_r;/yy_size_t yyleng_r;/' >$@

#Parser.hpp: Parser.py Parser.dat
#	./Parser.py <Parser.dat >$@

Cycript.tab.lo: Cycript.tab.cc $(header)
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $<

lex.cy.lo: lex.cy.c $(header)
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $<

%.lo: %.cpp $(header)
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $<

%.lo: %.mm $(header)
	$(libtool) --mode=compile $(objcxx) $(cflags) -c -o $@ $<

$(lib)cycript.la: $(code)
	$(libtool) --mode=link $(cxx) $(ldflags) -o $@ $(filter %.lo,$^) $(library) $(link) -rpath $(libdir)
	$(ldid) $@

cycript: Console.lo $(lib)cycript.la $(inject)
	$(libtool) --mode=link $(cxx) $(ldflags) -o $@ $(filter %.lo,$^) $(lib)cycript.la $(link) -rpath $(libdir)
	$(entitle) cycript

package: $(deb)

test: $(deb)
	dpkg -i $(deb)
	if [[ -e target.cy ]]; then cycript -c target.cy && echo; fi
	if [[ -e jquery.js ]]; then $(time) cycript -c jquery.js >jquery.cyc.js; gzip -9c jquery.cyc.js >jquery.cyc.js.gz; wc -c jquery.{mam,gcc,cyc,bak,yui}.js; wc -c jquery.{cyc,gcc,bak,mam,yui}.js.gz; fi
	if [[ -e test.cy ]]; then cycript test.cy; fi

install: cycript $(lib)cycript.$(dll)
	cp -p cycript /usr/bin
	cp -p $(lib)cycript.$(dll) /usr/lib

.PHONY: all clean extra package control.tmp
